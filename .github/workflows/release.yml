name: Release

on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
    - uses: actions/checkout@v4
    
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

  build-and-publish:
    name: Build and Publish
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary_name: zkp-ledger
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            binary_name: zkp-ledger
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            binary_name: zkp-ledger.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            binary_name: zkp-ledger
          - os: macos-latest
            target: aarch64-apple-darwin
            binary_name: zkp-ledger

    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install system dependencies (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake clang pkg-config libssl-dev
        
    - name: Install musl tools (Linux musl)
      if: matrix.target == 'x86_64-unknown-linux-musl'
      run: |
        sudo apt-get install -y musl-tools
        
    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install cmake llvm pkg-config

    - name: Cache cargo
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-${{ matrix.target }}-cargo-release-${{ hashFiles('**/Cargo.lock') }}

    - name: Build release binary
      run: cargo build --release --target ${{ matrix.target }}

    - name: Strip binary (Unix)
      if: matrix.os != 'windows-latest'
      run: strip target/${{ matrix.target }}/release/${{ matrix.binary_name }}

    - name: Create archive
      shell: bash
      run: |
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          7z a zkp-ledger-${{ matrix.target }}.zip target/${{ matrix.target }}/release/${{ matrix.binary_name }}
        else
          tar -czf zkp-ledger-${{ matrix.target }}.tar.gz -C target/${{ matrix.target }}/release ${{ matrix.binary_name }}
        fi

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./zkp-ledger-${{ matrix.target }}.${{ matrix.os == 'windows-latest' && 'zip' || 'tar.gz' }}
        asset_name: zkp-ledger-${{ matrix.target }}.${{ matrix.os == 'windows-latest' && 'zip' || 'tar.gz' }}
        asset_content_type: application/octet-stream

  publish-crate:
    name: Publish to crates.io
    runs-on: ubuntu-latest
    needs: build-and-publish
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake clang pkg-config libssl-dev

    - name: Publish to crates.io
      run: cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}

  publish-docker:
    name: Publish Docker Image
    runs-on: ubuntu-latest
    needs: create-release
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract version from tag
      id: version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          zkpdatasetledger/zkp-ledger:${{ steps.version.outputs.VERSION }}
          zkpdatasetledger/zkp-ledger:latest
        platforms: linux/amd64,linux/arm64
        cache-from: type=gha
        cache-to: type=gha,mode=max