# Monitoring stack for ZKP Dataset Ledger
# Complete observability setup for development and testing

version: '3.8'

services:
  # Prometheus - Metrics collection and storage
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: zkp-prometheus
    restart: unless-stopped
    
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--storage.tsdb.retention.size=5GB'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    
    ports:
      - "9090:9090"
    
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./docker/prometheus/rules/:/etc/prometheus/rules/:ro
      - prometheus_data:/prometheus
    
    networks:
      - monitoring
    
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1'

  # Grafana - Visualization and dashboards
  grafana:
    image: grafana/grafana:10.0.0
    container_name: zkp-grafana
    restart: unless-stopped
    
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-piechart-panel
      - GF_FEATURE_TOGGLES_ENABLE=ngalert
    
    ports:
      - "3000:3000"
    
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./docker/grafana/dashboards:/var/lib/grafana/dashboards:ro
    
    networks:
      - monitoring
    
    depends_on:
      - prometheus
    
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Jaeger - Distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:1.47
    container_name: zkp-jaeger
    restart: unless-stopped
    
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
    
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # HTTP collector
      - "14250:14250"  # gRPC collector
      - "9411:9411"    # Zipkin collector
    
    volumes:
      - jaeger_data:/tmp
    
    networks:
      - monitoring
    
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:14269/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # AlertManager - Alert routing and management
  alertmanager:
    image: prom/alertmanager:v0.25.0
    container_name: zkp-alertmanager
    restart: unless-stopped
    
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
      - '--cluster.advertise-address=0.0.0.0:9093'
    
    ports:
      - "9093:9093"
    
    volumes:
      - ./docker/alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
      - alertmanager_data:/alertmanager
    
    networks:
      - monitoring
    
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9093/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Node Exporter - System metrics
  node-exporter:
    image: prom/node-exporter:v1.6.0
    container_name: zkp-node-exporter
    restart: unless-stopped
    
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    
    ports:
      - "9100:9100"
    
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    
    networks:
      - monitoring
    
    deploy:
      mode: global

  # cAdvisor - Container metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.0
    container_name: zkp-cadvisor
    restart: unless-stopped
    
    ports:
      - "8080:8080"
    
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    
    networks:
      - monitoring
    
    privileged: true
    devices:
      - /dev/kmsg
    
    deploy:
      resources:
        limits:
          memory: 200M
          cpus: '0.3'

  # Pushgateway - Metrics for batch jobs
  pushgateway:
    image: prom/pushgateway:v1.6.0
    container_name: zkp-pushgateway
    restart: unless-stopped
    
    ports:
      - "9091:9091"
    
    networks:
      - monitoring
    
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9091/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Loki - Log aggregation
  loki:
    image: grafana/loki:2.8.0
    container_name: zkp-loki
    restart: unless-stopped
    
    command: -config.file=/etc/loki/local-config.yaml
    
    ports:
      - "3100:3100"
    
    volumes:
      - ./docker/loki/loki-config.yml:/etc/loki/local-config.yaml:ro
      - loki_data:/loki
    
    networks:
      - monitoring
    
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3100/ready"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Promtail - Log shipper
  promtail:
    image: grafana/promtail:2.8.0
    container_name: zkp-promtail
    restart: unless-stopped
    
    command: -config.file=/etc/promtail/config.yml
    
    volumes:
      - ./docker/promtail/promtail-config.yml:/etc/promtail/config.yml:ro
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    
    networks:
      - monitoring
    
    depends_on:
      - loki

  # Redis - Caching for monitoring data
  redis:
    image: redis:7-alpine
    container_name: zkp-redis-monitoring
    restart: unless-stopped
    
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    
    ports:
      - "6379:6379"
    
    volumes:
      - redis_monitoring_data:/data
    
    networks:
      - monitoring
    
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # BlackBox Exporter - External monitoring
  blackbox-exporter:
    image: prom/blackbox-exporter:v0.24.0
    container_name: zkp-blackbox-exporter
    restart: unless-stopped
    
    ports:
      - "9115:9115"
    
    volumes:
      - ./docker/blackbox/blackbox.yml:/etc/blackbox_exporter/config.yml:ro
    
    networks:
      - monitoring
    
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9115/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Karma - Alert dashboard
  karma:
    image: lmierzwa/karma:v0.118
    container_name: zkp-karma
    restart: unless-stopped
    
    environment:
      - ALERTMANAGER_URI=http://alertmanager:9093
      - PORT=8081
    
    ports:
      - "8081:8081"
    
    networks:
      - monitoring
    
    depends_on:
      - alertmanager

# Named volumes for persistent data
volumes:
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  jaeger_data:
    driver: local
  alertmanager_data:
    driver: local
  loki_data:
    driver: local
  redis_monitoring_data:
    driver: local

# Monitoring network
networks:
  monitoring:
    driver: bridge
    ipam:
      config:
        - subnet: 172.16.0.0/24