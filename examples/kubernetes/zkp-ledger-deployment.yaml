# Kubernetes deployment example for ZKP Dataset Ledger
# This demonstrates how to deploy the ledger in a production ML pipeline

apiVersion: apps/v1
kind: Deployment
metadata:
  name: zkp-dataset-ledger
  namespace: ml-pipeline
  labels:
    app: zkp-dataset-ledger
    version: v0.1.0
    component: audit-ledger
spec:
  replicas: 2
  selector:
    matchLabels:
      app: zkp-dataset-ledger
  template:
    metadata:
      labels:
        app: zkp-dataset-ledger
        version: v0.1.0
    spec:
      serviceAccountName: zkp-ledger-service-account
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        fsGroup: 65534
      containers:
      - name: zkp-ledger
        image: zkp-dataset-ledger/zkp-dataset-ledger:v0.1.0-secure
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
          name: http-api
          protocol: TCP
        - containerPort: 9090
          name: metrics
          protocol: TCP
        env:
        - name: RUST_LOG
          value: "info"
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: zkp-ledger-secrets
              key: database-url
        - name: LEDGER_PROJECT_NAME
          value: "production-ml-pipeline"
        - name: PROOF_CACHE_SIZE_MB
          value: "512"
        - name: PARALLEL_PROVE
          value: "true"
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
        volumeMounts:
        - name: ledger-data
          mountPath: /data
        - name: config
          mountPath: /etc/zkp-ledger
          readOnly: true
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      volumes:
      - name: ledger-data
        persistentVolumeClaim:
          claimName: zkp-ledger-storage
      - name: config
        configMap:
          name: zkp-ledger-config
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - zkp-dataset-ledger
              topologyKey: kubernetes.io/hostname

---
apiVersion: v1
kind: Service
metadata:
  name: zkp-dataset-ledger-service
  namespace: ml-pipeline
  labels:
    app: zkp-dataset-ledger
spec:
  selector:
    app: zkp-dataset-ledger
  ports:
  - name: http-api
    port: 80
    targetPort: 8080
    protocol: TCP
  - name: metrics
    port: 9090
    targetPort: 9090
    protocol: TCP
  type: ClusterIP

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: zkp-ledger-config
  namespace: ml-pipeline
data:
  zkp-ledger.toml: |
    [ledger]
    name = "production-ml-pipeline"
    hash_algorithm = "sha3-256"
    proof_system = "groth16"
    compression = true

    [storage]
    backend = "postgres"
    max_size_gb = 100
    connection_pool_size = 10

    [proof]
    curve = "bls12-381"
    security_level = 128
    parallel_prove = true
    cache_size_mb = 512

    [api]
    bind_address = "0.0.0.0:8080"
    cors_enabled = false
    rate_limit_requests_per_minute = 1000

    [metrics]
    bind_address = "0.0.0.0:9090"
    enabled = true

    [export]
    formats = ["json-ld", "pdf"]
    include_visualizations = false

---
apiVersion: v1
kind: Secret
metadata:
  name: zkp-ledger-secrets
  namespace: ml-pipeline
type: Opaque
data:
  # Base64 encoded database URL
  # Example: postgresql://zkp_user:password@postgres:5432/zkp_ledger
  database-url: cG9zdGdyZXNxbDovL3prcF91c2VyOnBhc3N3b3JkQHBvc3RncmVzOjU0MzIvemtwX2xlZGdlcg==

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: zkp-ledger-storage
  namespace: ml-pipeline
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
  storageClassName: fast-ssd

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: zkp-ledger-service-account
  namespace: ml-pipeline

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: zkp-ledger-role
  namespace: ml-pipeline
rules:
- apiGroups: [""]
  resources: ["configmaps", "secrets"]
  verbs: ["get", "list"]
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: zkp-ledger-role-binding
  namespace: ml-pipeline
subjects:
- kind: ServiceAccount
  name: zkp-ledger-service-account
  namespace: ml-pipeline
roleRef:
  kind: Role
  name: zkp-ledger-role
  apiGroup: rbac.authorization.k8s.io

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: zkp-ledger-network-policy
  namespace: ml-pipeline
spec:
  podSelector:
    matchLabels:
      app: zkp-dataset-ledger
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ml-pipeline
    - podSelector:
        matchLabels:
          component: ml-training
    - podSelector:
        matchLabels:
          component: data-processing
    ports:
    - protocol: TCP
      port: 8080
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 9090
  egress:
  - to:
    - podSelector:
        matchLabels:
          app: postgres
    ports:
    - protocol: TCP
      port: 5432
  - to: []
    ports:
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53

---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: zkp-dataset-ledger-metrics
  namespace: ml-pipeline
  labels:
    app: zkp-dataset-ledger
spec:
  selector:
    matchLabels:
      app: zkp-dataset-ledger
  endpoints:
  - port: metrics
    interval: 30s
    path: /metrics